import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export interface SenatorPDFData {
  id: string;
  name: string;
  position: string;
  party: string;
  region: string;
  trustScore: number;
  followerCount: number;
  termStart: string;
  termEnd: string;
  bio?: string;
  profileImageUrl?: string;
  contactInfo?: {
    email?: string;
    phone?: string;
    office?: string;
  };
  achievements?: string[];
  ratings?: {
    transparency: number;
    performance: number;
    engagement: number;
    overall: number;
  };
}

export const exportSenatorToPDF = async (senatorData: SenatorPDFData): Promise<void> => {
  const pdf = new jsPDF();
  const pageWidth = pdf.internal.pageSize.getWidth();
  const pageHeight = pdf.internal.pageSize.getHeight();
  
  try {
    // Header
    pdf.setFontSize(20);
    pdf.setFont('helvetica', 'bold');
    pdf.text('SENATOR PROFILE REPORT', pageWidth / 2, 20, { align: 'center' });
    
    // Senator Name
    pdf.setFontSize(16);
    pdf.text(senatorData.name, pageWidth / 2, 35, { align: 'center' });
    
    pdf.setFontSize(12);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`${senatorData.position} | ${senatorData.party}`, pageWidth / 2, 45, { align: 'center' });
    pdf.text(`Region: ${senatorData.region}`, pageWidth / 2, 55, { align: 'center' });
    
    // Line separator
    pdf.line(20, 65, pageWidth - 20, 65);
    
    let yPosition = 75;
    
    // Trust Score Section
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('TRUST SCORE & METRICS', 20, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Trust Score: ${senatorData.trustScore}/100`, 20, yPosition);
    pdf.text(`Followers: ${senatorData.followerCount.toLocaleString()}`, 120, yPosition);
    yPosition += 8;
    
    if (senatorData.ratings) {
      pdf.text(`Transparency: ${senatorData.ratings.transparency}/5`, 20, yPosition);
      pdf.text(`Performance: ${senatorData.ratings.performance}/5`, 80, yPosition);
      pdf.text(`Engagement: ${senatorData.ratings.engagement}/5`, 140, yPosition);
      yPosition += 8;
      pdf.text(`Overall Rating: ${senatorData.ratings.overall}/5`, 20, yPosition);
      yPosition += 15;
    }
    
    // Term Information
    pdf.setFontSize(14);
    pdf.setFont('helvetica', 'bold');
    pdf.text('TERM INFORMATION', 20, yPosition);
    yPosition += 10;
    
    pdf.setFontSize(10);
    pdf.setFont('helvetica', 'normal');
    pdf.text(`Term Start: ${senatorData.termStart}`, 20, yPosition);
    pdf.text(`Term End: ${senatorData.termEnd}`, 120, yPosition);
    yPosition += 15;
    
    // Bio Section
    if (senatorData.bio) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('BIOGRAPHY', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      const bioLines = pdf.splitTextToSize(senatorData.bio, pageWidth - 40);
      pdf.text(bioLines, 20, yPosition);
      yPosition += bioLines.length * 5 + 10;
    }
    
    // Contact Information
    if (senatorData.contactInfo) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CONTACT INFORMATION', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      if (senatorData.contactInfo.email) {
        pdf.text(`Email: ${senatorData.contactInfo.email}`, 20, yPosition);
        yPosition += 8;
      }
      if (senatorData.contactInfo.phone) {
        pdf.text(`Phone: ${senatorData.contactInfo.phone}`, 20, yPosition);
        yPosition += 8;
      }
      if (senatorData.contactInfo.office) {
        pdf.text(`Office: ${senatorData.contactInfo.office}`, 20, yPosition);
        yPosition += 8;
      }
      yPosition += 10;
    }
    
    // Achievements
    if (senatorData.achievements && senatorData.achievements.length > 0) {
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('ACHIEVEMENTS & HIGHLIGHTS', 20, yPosition);
      yPosition += 10;
      
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      senatorData.achievements.forEach((achievement, index) => {
        pdf.text(`â€¢ ${achievement}`, 25, yPosition);
        yPosition += 8;
      });
    }
    
    // Footer
    pdf.setFontSize(8);
    pdf.setFont('helvetica', 'italic');
    pdf.text('Generated by CamerPulse - Civic Engagement Platform', pageWidth / 2, pageHeight - 10, { align: 'center' });
    pdf.text(`Generated on: ${new Date().toLocaleDateString()}`, pageWidth / 2, pageHeight - 5, { align: 'center' });
    
    // Save the PDF
    pdf.save(`${senatorData.name.replace(/\s+/g, '_')}_Profile.pdf`);
    
  } catch (error) {
    console.error('Error generating PDF:', error);
    throw new Error('Failed to generate PDF report');
  }
};

export const exportElementToPDF = async (elementId: string, filename: string): Promise<void> => {
  const element = document.getElementById(elementId);
  if (!element) {
    throw new Error('Element not found');
  }

  try {
    const canvas = await html2canvas(element, {
      scale: 2,
      useCORS: true,
      allowTaint: true,
    });

    const imgData = canvas.toDataURL('image/png');
    const pdf = new jsPDF();
    const imgWidth = 210;
    const pageHeight = 295;
    const imgHeight = (canvas.height * imgWidth) / canvas.width;
    let heightLeft = imgHeight;

    let position = 0;

    pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
    heightLeft -= pageHeight;

    while (heightLeft >= 0) {
      position = heightLeft - imgHeight;
      pdf.addPage();
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
    }

    pdf.save(filename);
  } catch (error) {
    console.error('Error exporting to PDF:', error);
    throw new Error('Failed to export to PDF');
  }
};