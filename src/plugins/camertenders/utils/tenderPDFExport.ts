import { jsPDF } from 'jspdf';

export interface TenderPDFData {
  id: string;
  title: string;
  description: string;
  status: string;
  category: string;
  issuer_name: string;
  region: string;
  deadline: string;
  budget_min?: number;
  budget_max?: number;
  created_at: string;
  requirements?: string[];
  documents?: string[];
  contact_info?: {
    email: string;
    phone: string;
    address: string;
  };
  bids_count?: number;
  estimated_value?: number;
}

export const exportTenderToPDF = async (tenderData: TenderPDFData): Promise<void> => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  let currentY = margin;

  // Helper function to add text with automatic wrapping
  const addText = (text: string, fontSize: number = 10, isBold: boolean = false) => {
    doc.setFontSize(fontSize);
    doc.setFont('helvetica', isBold ? 'bold' : 'normal');
    
    const textLines = doc.splitTextToSize(text, pageWidth - 2 * margin);
    doc.text(textLines, margin, currentY);
    currentY += (textLines.length * fontSize * 0.6) + 5;
    
    // Check if we need a new page
    if (currentY > doc.internal.pageSize.height - margin) {
      doc.addPage();
      currentY = margin;
    }
  };

  const addSection = (title: string, content: string) => {
    addText(title, 12, true);
    addText(content, 10, false);
    currentY += 5;
  };

  // Header
  doc.setFillColor(37, 99, 235); // Primary blue
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(20);
  doc.setFont('helvetica', 'bold');
  doc.text('CamerTenders - Tender Summary', margin, 25);
  
  currentY = 60;
  doc.setTextColor(0, 0, 0);

  // Basic Information
  addText('TENDER SUMMARY REPORT', 16, true);
  addText(`Generated on: ${new Date().toLocaleDateString()}`, 10, false);
  currentY += 10;

  addSection('Tender Title:', tenderData.title);
  addSection('Tender ID:', tenderData.id);
  addSection('Status:', tenderData.status.toUpperCase());
  addSection('Category:', tenderData.category);
  addSection('Issuing Authority:', tenderData.issuer_name);
  addSection('Region:', tenderData.region);
  addSection('Publication Date:', new Date(tenderData.created_at).toLocaleDateString());
  addSection('Deadline:', new Date(tenderData.deadline).toLocaleDateString());

  // Budget Information
  if (tenderData.budget_min || tenderData.budget_max) {
    let budgetText = '';
    if (tenderData.budget_min && tenderData.budget_max) {
      budgetText = `$${tenderData.budget_min.toLocaleString()} - $${tenderData.budget_max.toLocaleString()}`;
    } else if (tenderData.budget_min) {
      budgetText = `Minimum: $${tenderData.budget_min.toLocaleString()}`;
    } else if (tenderData.budget_max) {
      budgetText = `Maximum: $${tenderData.budget_max.toLocaleString()}`;
    }
    addSection('Budget Range:', budgetText);
  }

  if (tenderData.estimated_value) {
    addSection('Estimated Value:', `$${tenderData.estimated_value.toLocaleString()}`);
  }

  if (tenderData.bids_count !== undefined) {
    addSection('Number of Bids Received:', tenderData.bids_count.toString());
  }

  // Description
  addSection('Description:', tenderData.description);

  // Requirements
  if (tenderData.requirements && tenderData.requirements.length > 0) {
    addText('REQUIREMENTS:', 12, true);
    tenderData.requirements.forEach((req, index) => {
      addText(`${index + 1}. ${req}`, 10, false);
    });
    currentY += 5;
  }

  // Required Documents
  if (tenderData.documents && tenderData.documents.length > 0) {
    addText('REQUIRED DOCUMENTS:', 12, true);
    tenderData.documents.forEach((doc, index) => {
      addText(`${index + 1}. ${doc}`, 10, false);
    });
    currentY += 5;
  }

  // Contact Information
  if (tenderData.contact_info) {
    addText('CONTACT INFORMATION:', 12, true);
    if (tenderData.contact_info.email) {
      addSection('Email:', tenderData.contact_info.email);
    }
    if (tenderData.contact_info.phone) {
      addSection('Phone:', tenderData.contact_info.phone);
    }
    if (tenderData.contact_info.address) {
      addSection('Address:', tenderData.contact_info.address);
    }
  }

  // Footer with disclaimer
  const footerY = doc.internal.pageSize.height - 30;
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('This document is generated from CamerTenders platform for informational purposes.', margin, footerY);
  doc.text('Please verify all information with official government sources before submission.', margin, footerY + 10);
  doc.text('Report generated by CamerTenders.org - Transparency in Public Procurement', margin, footerY + 20);

  // Save the PDF
  const fileName = `tender-${tenderData.id}-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};

export const exportTenderListToPDF = async (tenders: TenderPDFData[]): Promise<void> => {
  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.width;
  const margin = 20;
  let currentY = margin;

  // Header
  doc.setFillColor(37, 99, 235);
  doc.rect(0, 0, pageWidth, 40, 'F');
  
  doc.setTextColor(255, 255, 255);
  doc.setFontSize(18);
  doc.setFont('helvetica', 'bold');
  doc.text('CamerTenders - Watchlist Export', margin, 25);
  
  currentY = 60;
  doc.setTextColor(0, 0, 0);

  // Summary
  doc.setFontSize(12);
  doc.setFont('helvetica', 'bold');
  doc.text(`Tender Watchlist Export`, margin, currentY);
  currentY += 15;

  doc.setFontSize(10);
  doc.setFont('helvetica', 'normal');
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, margin, currentY);
  doc.text(`Total Tenders: ${tenders.length}`, margin, currentY + 10);
  currentY += 25;

  // Tender list
  tenders.forEach((tender, index) => {
    // Check if we need a new page
    if (currentY > doc.internal.pageSize.height - 80) {
      doc.addPage();
      currentY = margin;
    }

    // Tender header
    doc.setFillColor(248, 250, 252);
    doc.rect(margin, currentY - 5, pageWidth - 2 * margin, 20, 'F');
    
    doc.setFontSize(11);
    doc.setFont('helvetica', 'bold');
    doc.text(`${index + 1}. ${tender.title}`, margin + 5, currentY + 8);
    currentY += 25;

    // Tender details
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    
    const details = [
      `Status: ${tender.status}`,
      `Category: ${tender.category}`,
      `Issuer: ${tender.issuer_name}`,
      `Region: ${tender.region}`,
      `Deadline: ${new Date(tender.deadline).toLocaleDateString()}`,
      `Budget: $${(tender.budget_min || 0).toLocaleString()}`
    ];

    details.forEach((detail, detailIndex) => {
      const x = margin + 5 + (detailIndex % 2) * 180;
      const y = currentY + Math.floor(detailIndex / 2) * 10;
      doc.text(detail, x, y);
    });

    currentY += 35;
  });

  // Footer
  const footerY = doc.internal.pageSize.height - 20;
  doc.setFontSize(8);
  doc.setTextColor(128, 128, 128);
  doc.text('Generated by CamerTenders.org - Public Procurement Transparency Platform', margin, footerY);

  // Save
  const fileName = `tender-watchlist-${new Date().toISOString().split('T')[0]}.pdf`;
  doc.save(fileName);
};